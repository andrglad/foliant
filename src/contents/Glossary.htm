<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta charset="utf-8" />
  <title>Glossary</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="assets/css/default.css" />
</head>
<body>
  <h1 style="text-align: left">Glossary</h1>
  <table class="noborder">
    <colgroup>
      <col span="2" />
    </colgroup>
    <tbody>
      <tr>
        <th style="background-color: #164A96;color: #FFFFFF">Term</th>
        <th style="background-color: #164A96;color: #FFFFFF">Definition</th>
      </tr>
      <tr>
        <td>Application Administrator</td>
        <td>An employee responsible for the functioning of the System in terms of Application Software, administration of the System users</td>
      </tr>
      <tr>
        <td>IS Administrator</td>
        <td>An employee ensuring compliance with the requirements and exercising control in terms of information security during the implementation and operation of the system</td>
      </tr>
      <tr>
        <td>Application Security</td>
        <td>The ISO/IEC 27034 standard covers all aspects of secure software development (<a href="http://www.iso27001security.com/html/27034.html">http://www.iso27001security.com/html/27034.html</a>)</td>
      </tr>
      <tr>
        <td>Application Security Strategy</td>
        <td>A system of approaches, techniques, practices, and steps for seamless implementation of secure software development processes into the existing software release cycle. Organizational, technological, and methodological specifics of software delivery organization are taken into account</td>
      </tr>
      <tr>
        <td>Vulnerability</td>
        <td>A software vulnerability is a glitch, flaw, or weakness in the software that can be exploited to break functionality or gain unauthorized access to application resources.</td>
      </tr>
      <tr>
        <td>Application Security Testing</td>
        <td>Application testing to identify software security defects and vulnerabilities. It includes execution of automated testing using practices such as SAST / DAST / IAST / SCA / BCA </td>
      </tr>
      <tr>
        <td>SAST (Static Application Security Testing)</td>
        <td>Static application source code analysis using specialized tools. It allows identification of software source code vulnerabilities at the early stages of software development. It identifies vulnerabilities by analyzing data flows in an application, determining the full path from the data source to all possible branches within the code</td>
      </tr>
      <tr>
        <td>Dynamic Application ‎Security Testing (DAST)</td>
        <td>Dynamic application analysis using specialized tools allows discovering software vulnerabilities within the application already deployed on the stand. It identifies possible vulnerabilities within the system by simulating the user&#39;s interaction with the system, sending requests with specifically formed data, and validating responses sent by the server</td>
      </tr>
      <tr>
        <td>Open Source Analysis (OSA) / Software Composition Analysis (SCA)</td>
        <td>Analysis of open-source libraries and components that are just entering the software engineering perimeter and are already used as artifacts within an application. Analysis is performed in terms of known security vulnerabilities and license violations</td>
      </tr>
      <tr>
        <td>Runtime Application Self-Protection (RASP)</td>
        <td>A class of automated tools and techniques for protection of applications and services from vulnerabilities in a production environment</td>
      </tr>
      <tr>
        <td>Bytecode and Container Analysis (BCA)</td>
        <td>Automated analysis of compiled build artifacts, software distributions and docker containers using designated tools, including but not limited to cases where source code isn’t available for security analysis in the latter stages of SDLC</td>
      </tr>
      <tr>
        <td>Web Application ‎Firewall (WAF)</td>
        <td>Automated tool for identification of attacks and blocking of exploits for web applications, including zero-day vulnerabilities</td>
      </tr>
      <tr>
        <td>Building Security In Maturity Model (BSIMM)</td>
        <td>Application security maturity model, a framework that provides an overview of currently existing practices and initiatives in software security  (https://www.bsimm.com/)</td>
      </tr>
      <tr>
        <td>openSAMM (Software Assurance Maturity Model)</td>
        <td>An open framework to help organizations formulate and implement a strategy for software security that is tailored to the specific risks facing the organization (<a href="http://www.opensamm.org">http://www.opensamm.org</a>)</td>
      </tr>
      <tr>
        <td>Open Web Application Security Project (OWASP)</td>
        <td>An open community, supporting and developing practices, tools, techniques, and initiatives for Application Security domain (<a href="https://www.owasp.org">https://www.owasp.org</a>)</td>
      </tr>
      <tr>
        <td>Secure Software Development Lifecycle (SSDL)</td>
        <td>The lifecycle of security assurance applied to software engineering, the process focused on decreasing the number of software vulnerabilities and the level of their severity, and assuring security and confidentiality at all stages of the development process</td>
      </tr>
      <tr>
        <td>Development and ‎Operations (DevOps)</td>
        <td>Software engineering practices, tools, and techniques focused on decreasing release cycle, time-to-market, and increasing overall effectiveness of software development</td>
      </tr>
      <tr>
        <td>Security, Development, and Operations (DevSecOps)</td>
        <td>The concept of making software security a core part of the overall software delivery process</td>
      </tr>
      <tr>
        <td>DevSecOps Ecosystem</td>
        <td>A collection of tools and process workflows created and executed on the tools to support all the activities throughout the full DevSecOps lifecycle. DevSecOps workflows may be fully automated, semi-automated, or manual</td>
      </tr>
      <tr>
        <td>Source Code</td>
        <td>Software instructions for a computer, written in a programming language. These instructions may be in the form of either human-readable source code, or machine code, which is source code that has been compiled into machine-executable instructions</td>
      </tr>
      <tr>
        <td>Codebase</td>
        <td>A collection of source code used to build a particular software system, application, or software component. Typically, a codebase includes only human-written source code files; thus, a codebase usually doesn’t include source code files generated by tools (generated files) or binary library files (object files), as they can be built from the human-written source code. However, it usually includes configuration and property files, as they are the data necessary for the build</td>
      </tr>
      <tr>
        <td rowspan="2">Software Artifact</td>
        <td rowspan="2">An artifact is a work that has been documented and stored in a repository so that it can be retrieved upon demand. Artifacts include, but aren’t limited to, virtual machine (VM) images, container images, binary executables, open-source libraries and components, distributions, and archives</td>
      </tr>
      <tr>
      </tr>
      <tr>
        <td>Containers</td>
        <td>A standard unit of software that packages up code and all its dependencies, down to, but not including the Operating System (OS). It’s a lightweight, standalone, executable package of software that includes everything needed to run an application except the OS: code, runtime, system tools, system libraries, and settings. Several containers can run in the same OS without conflicting with one another. Containers are run on the OS, so no hypervisor (virtualization) is necessary (though the OS itself may be running on a hypervisor)</td>
      </tr>
      <tr>
        <td>Software Factory</td>
        <td>
          <p>Software Factory is a structured set of software artifacts installed in a development environment that makes it easier for architects and developers to predictably, efficiently, and accurately build a particular type of application.</p>
          <p>A Software Factory that contains multiple pipelines, which are equipped with a set of tools, process workflows, scripts, and environments, to produce a set of deployable software artifacts with minimal human intervention. It automates the activities in the development, build, test, release, and deliver phases. The software factory supports multi-tenancy</p>
        </td>
      </tr>
      <tr>
        <td>Artifact Repository</td>
        <td>
          <p>A local repository tied to the software factory. It stores artifacts pulled from a centralized artifact repository as well as locally developed artifacts to be used in DevSecOps processes. It supports multi-tenancy.</p>
          <p>Note that programs may have a single artifact repository and use tags to distinguish the content types. It’s also possible to have separate artifact repositories to store local artifacts and released artifacts</p>
        </td>
      </tr>
      <tr>
        <td rowspan="2">Application Security Testing Orchestration (ASTO)</td>
        <td rowspan="2">The approach to building a fully automated, end-to-end orchestration process for the entire DevSecOps tool chain and managing security CI/CD pipelines. The DevSecOps perimeter is formed within ASTO practice. It helps to manage the software application portfolio, ensure seamless integration of the security tools to the software development infrastructure, and implement data collection and consolidation mechanisms for process visibility and continuous monitoring</td>
      </tr>
      <tr>
      </tr>
      <tr>
        <td>Environment</td>
        <td>Sets a runtime boundary for the software component to be deployed and executed. Typical environments include development, integration, test, pre-production, and production</td>
      </tr>
      <tr>
        <td>Standard</td>
        <td>A set of requirements or categories of information security requirements against which an application can be checked. Standards can be both global and internal company ones.</td>
      </tr>
      <tr>
        <td>Defects</td>
        <td>A defect is a confirmed vulnerability recorded in a Software Defect Tracking system. Each defect has a type, description, and recommendations for elimination</td>
      </tr>
      <tr>
        <td>CI/CD (Continuous Integration / Continuous Delivery)</td>
        <td>It’s a system of continuous integration and continuous delivery of software. TeamCity can be considered as an example of such a system.</td>
      </tr>
      <tr>
        <td>Machine Learning</td>
        <td>Machine learning algorithms</td>
      </tr>
      <tr>
        <td rowspan="2">Knowledge Management</td>
        <td rowspan="2">Practice for Application Security requirements and knowledge management within the SSDL process. Knowledgebase of application security standards and guidelines in terms of secure architecture design, programming languages specifics, and software frameworks</td>
      </tr>
      <tr>
      </tr>
      <tr>
        <td>AST</td>
        <td>Application Security Testing</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
</body>
</html>